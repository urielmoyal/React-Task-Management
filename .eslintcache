[{"C:\\Codeing Projects\\React task management\\React-Task-Management\\src\\index.js":"1","C:\\Codeing Projects\\React task management\\React-Task-Management\\src\\components\\App.jsx":"2","C:\\Codeing Projects\\React task management\\React-Task-Management\\src\\components\\UserContext.jsx":"3","C:\\Codeing Projects\\React task management\\React-Task-Management\\src\\components\\NotesScreen.jsx":"4","C:\\Codeing Projects\\React task management\\React-Task-Management\\src\\components\\LogIn.jsx":"5","C:\\Codeing Projects\\React task management\\React-Task-Management\\src\\components\\Header.jsx":"6","C:\\Codeing Projects\\React task management\\React-Task-Management\\src\\components\\Note.jsx":"7","C:\\Codeing Projects\\React task management\\React-Task-Management\\src\\components\\UpdatePopUP.jsx":"8","C:\\Codeing Projects\\React task management\\React-Task-Management\\src\\components\\Loading.jsx":"9","C:\\Codeing Projects\\React task management\\React-Task-Management\\src\\components\\CreateArea.jsx":"10"},{"size":164,"mtime":1632748780622,"results":"11","hashOfConfig":"12"},{"size":607,"mtime":1632748780617,"results":"13","hashOfConfig":"12"},{"size":1306,"mtime":1632748780622,"results":"14","hashOfConfig":"12"},{"size":4321,"mtime":1632748780621,"results":"15","hashOfConfig":"12"},{"size":4006,"mtime":1632748780620,"results":"16","hashOfConfig":"12"},{"size":2028,"mtime":1632748780618,"results":"17","hashOfConfig":"12"},{"size":3063,"mtime":1632748780620,"results":"18","hashOfConfig":"12"},{"size":3140,"mtime":1632907785399,"results":"19","hashOfConfig":"12"},{"size":254,"mtime":1632748780619,"results":"20","hashOfConfig":"12"},{"size":2769,"mtime":1632749742456,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1sskxmt",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"24"},"C:\\Codeing Projects\\React task management\\React-Task-Management\\src\\index.js",[],["46","47"],"C:\\Codeing Projects\\React task management\\React-Task-Management\\src\\components\\App.jsx",[],"C:\\Codeing Projects\\React task management\\React-Task-Management\\src\\components\\UserContext.jsx",[],"C:\\Codeing Projects\\React task management\\React-Task-Management\\src\\components\\NotesScreen.jsx",["48"],"import React, { useEffect, useState } from \"react\";\r\nimport Header from \"./Header\";\r\nimport Note from \"./Note\";\r\nimport MyModal from \"./UpdatePopUP\";\r\nimport CreateArea from \"./CreateArea\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport { useRealmApp } from \"./UserContext\";\r\nimport styled from \"@emotion/styled\";\r\nimport { uiColors } from \"@leafygreen-ui/palette\";\r\nimport Loading from \"./Loading\";\r\n\r\nfunction NotesScreen() {\r\n  const app = useRealmApp();\r\n  const mongodb = app.currentUser.mongoClient(\"mongodb-atlas\").db(\"Kepper\");\r\n  const Notes = mongodb.collection(\"Notes\");\r\n\r\n  const [noteArray, setNoteArray] = useState([]);\r\n  const [showNontesOf, setShowNotesOf] = useState(\"all\");\r\n  const [isLoggingIn, setIsLoggingIn] = useState(true);\r\n\r\n  const [modal, setModal] = useState({\r\n    show: false,\r\n    note: {\r\n      id: \"\",\r\n      title: \"\",\r\n      content: \"\",\r\n      employee: \"\",\r\n    },\r\n  });\r\n\r\n  function setUp() {\r\n    //get all Notes from mangoDB 'Notes' collection\r\n    const getNotesFromDb = async () => {\r\n      const result = await app.currentUser.functions.getUserPermission();\r\n\r\n      if (result.role === \"manager\") {\r\n        await Notes.find({}).then((val) => {\r\n          setNoteArray(val);\r\n          setIsLoggingIn(false);\r\n        });\r\n      } else {\r\n        await Notes.find({ employee: result.name }).then((val) => {\r\n          setNoteArray(val);\r\n          setIsLoggingIn(false);\r\n        });\r\n      }\r\n    };\r\n\r\n    //Listen to changes on the Colletion\r\n    const dbListener = async () => {\r\n      for await (const change of Notes.watch()) {\r\n        switch (change.operationType) {\r\n          case \"insert\": {\r\n            const { documentKey, fullDocument } = change;\r\n            console.log(`updated document: ${documentKey}`, fullDocument);\r\n            setNoteArray((preVal) => {\r\n              return [...preVal, fullDocument];\r\n            });\r\n            break;\r\n          }\r\n          case \"update\": {\r\n            const { documentKey, fullDocument } = change;\r\n            let id = JSON.stringify(documentKey._id);\r\n            let findNoteById = (note) => JSON.stringify(note._id) === id;\r\n            setNoteArray((preVal) => {\r\n              let index = preVal.findIndex(findNoteById);\r\n              preVal[index] = fullDocument;\r\n\r\n              //to do : check why return preVal not rerender\r\n              return new Array(...preVal);\r\n            });\r\n            break;\r\n          }\r\n          case \"replace\": {\r\n            const { documentKey, fullDocument } = change;\r\n            console.log(`replaced document: ${documentKey}`, fullDocument);\r\n            break;\r\n          }\r\n          case \"delete\": {\r\n            const { documentKey } = change;\r\n            let id = JSON.stringify(documentKey._id);\r\n            setNoteArray((prevVal) => {\r\n              return prevVal.filter((Note) => {\r\n                return JSON.stringify(Note._id) !== id;\r\n              });\r\n            });\r\n            break;\r\n          }\r\n          default: {\r\n          }\r\n        }\r\n      }\r\n    };\r\n    getNotesFromDb();\r\n    dbListener();\r\n  }\r\n\r\n  useEffect(setUp, []);\r\n\r\n  function closeModal() {\r\n    setModal((prev) => {\r\n      return { ...prev, show: false };\r\n    });\r\n  }\r\n\r\n  function createNote(note) {\r\n    return (\r\n      <Note\r\n        openModal={setModal}\r\n        id={note.id}\r\n        key={note.id}\r\n        title={note.title}\r\n        content={note.content}\r\n        Employee={note.employee}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {\" \"}\r\n      {isLoggingIn ? (\r\n        <Container>\r\n          <Loading />\r\n        </Container>\r\n      ) : (\r\n        <div>\r\n          <MyModal show={modal.show} handleClose={closeModal} note={modal.note} />\r\n          <Header setShowNotesOf={setShowNotesOf} />\r\n          <CreateArea />\r\n          <Row xs={1} md={3} className=\"g-4\">\r\n            {showNontesOf === \"all\"\r\n              ? noteArray.map(createNote)\r\n              : noteArray.filter((note) => note.employee === showNontesOf).map(createNote)}\r\n          </Row>\r\n        </div>\r\n      )}{\" \"}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NotesScreen;\r\n\r\nconst Container = styled.div`\r\n  height: 100vh;\r\n  justify-content: center;\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  background: ${uiColors.gray.light2};\r\n`;\r\n","C:\\Codeing Projects\\React task management\\React-Task-Management\\src\\components\\LogIn.jsx",[],"C:\\Codeing Projects\\React task management\\React-Task-Management\\src\\components\\Header.jsx",["49"],"import { React, useState, useEffect } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { useRealmApp } from \"./UserContext\";\r\n\r\nfunction Header(props) {\r\n  const [userNameAndRole, setUserNameAndRole] = useState({ name: \"\", role: \"\" });\r\n  const app = useRealmApp();\r\n\r\n  const handleSelect = (eventKey) => {\r\n    props.setShowNotesOf(eventKey);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const getUserNameAndRole = async () => {\r\n      const result = await app.currentUser.functions.getUserPermission();\r\n      setUserNameAndRole(result);\r\n    };\r\n    getUserNameAndRole();\r\n  }, []);\r\n\r\n  return (\r\n    <header>\r\n      {userNameAndRole.role === \"manager\" ? (\r\n        <Nav variant=\"pills\" activeKey=\"1\" onSelect={handleSelect}>\r\n          <Navbar.Brand href=\"#home\">Hello {userNameAndRole.name}</Navbar.Brand>\r\n\r\n          <Nav.Item>\r\n            <Nav.Link eventKey=\"Employee_1\" title=\"Item\">\r\n              Employee_1\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link eventKey=\"Employee_2\" title=\"Item\">\r\n              Employee_2\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link eventKey=\"Employee_3\" title=\"Item\">\r\n              Employee_3\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link eventKey=\"all\" title=\"Item\">\r\n              all\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n\r\n          <Button className=\"ml-auto\" onClick={app.logOut}>\r\n            Log Out\r\n          </Button>\r\n        </Nav>\r\n      ) : (\r\n        <Nav variant=\"pills\" activeKey=\"1\" onSelect={handleSelect}>\r\n          <Navbar.Brand href=\"#home\">Hello {userNameAndRole.name}</Navbar.Brand>\r\n          <Button className=\"ml-auto\" onClick={app.logOut}>\r\n            Log Out\r\n          </Button>\r\n        </Nav>\r\n      )}\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","C:\\Codeing Projects\\React task management\\React-Task-Management\\src\\components\\Note.jsx",[],"C:\\Codeing Projects\\React task management\\React-Task-Management\\src\\components\\UpdatePopUP.jsx",[],"C:\\Codeing Projects\\React task management\\React-Task-Management\\src\\components\\Loading.jsx",[],"C:\\Codeing Projects\\React task management\\React-Task-Management\\src\\components\\CreateArea.jsx",["50"],"import React, { useState, useEffect } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { useRealmApp } from \"./UserContext\";\r\n\r\nfunction CreateArea() {\r\n  const app = useRealmApp();\r\n  const mongodb = app.currentUser.mongoClient(\"mongodb-atlas\").db(\"Kepper\");\r\n  const Notes = mongodb.collection(\"Notes\");\r\n\r\n  const [noteInput, setNoteInPut] = useState({\r\n    id: \"\",\r\n    title: \"\",\r\n    content: \"\",\r\n    employee: \"\",\r\n  });\r\n  const [userNameAndRole, setUserNameAndRole] = useState({ name: \"\", role: \"\" });\r\n\r\n  useEffect(() => {\r\n    const getUserNameAndRole = async () => {\r\n      const result = await app.currentUser.functions.getUserPermission();\r\n      setUserNameAndRole(result);\r\n    };\r\n    getUserNameAndRole();\r\n  }, []);\r\n\r\n  function handleChange(event) {\r\n    const { name, value } = event.target;\r\n    setNoteInPut((preVal) => {\r\n      return { ...preVal, [name]: value, id: uuidv4() };\r\n    });\r\n  }\r\n\r\n  function addNote(e) {\r\n    e.preventDefault();\r\n    Notes.insertOne(noteInput)\r\n      .then((result) => {\r\n        console.log(`Successfully inserted item with _id: ${result.insertedId}`);\r\n        setNoteInPut({\r\n          id: \"\",\r\n          title: \"\",\r\n          content: \"\",\r\n          employee: \"\",\r\n        });\r\n      })\r\n      .catch((err) => console.error(`Failed to insert item: ${err}`));\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {userNameAndRole.role === \"manager\" ? (\r\n        <form onSubmit={addNote}>\r\n          <input\r\n            name=\"title\"\r\n            value={noteInput.title}\r\n            placeholder=\"Title\"\r\n            onChange={handleChange}\r\n            required\r\n          />\r\n          <textarea\r\n            name=\"content\"\r\n            value={noteInput.content}\r\n            placeholder=\"Add Description \"\r\n            onChange={handleChange}\r\n            rows=\"3\"\r\n            required\r\n          />\r\n          <div className=\"input-group mb-3\">\r\n            <div className=\"input-group-prepend\">\r\n              <label className=\"input-group-text\" htmlFor=\"employeesSelect\">\r\n                Choose Employ\r\n              </label>\r\n            </div>\r\n            <select\r\n              name=\"employee\"\r\n              className=\"custom-select\"\r\n              id=\"employeesSelect\"\r\n              onChange={handleChange}\r\n              required\r\n            >\r\n              <option value=\"\">Choose...</option>\r\n              <option value=\"Employee_1\">Employee 1</option>\r\n              <option value=\"Employee_2\">Employee 2</option>\r\n              <option value=\"Employee_3\">Employee 3</option>\r\n            </select>\r\n          </div>\r\n\r\n          <button id=\"noteButton\" type=\"submit\">\r\n            +\r\n          </button>\r\n        </form>\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CreateArea;\r\n",{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":98,"column":20,"nodeType":"57","endLine":98,"endColumn":22,"suggestions":"58"},{"ruleId":"55","severity":1,"message":"59","line":22,"column":6,"nodeType":"57","endLine":22,"endColumn":8,"suggestions":"60"},{"ruleId":"55","severity":1,"message":"59","line":24,"column":6,"nodeType":"57","endLine":24,"endColumn":8,"suggestions":"61"},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'Notes' and 'app.currentUser.functions'. Either include them or remove the dependency array.","ArrayExpression",["64"],"React Hook useEffect has a missing dependency: 'app.currentUser.functions'. Either include it or remove the dependency array.",["65"],["66"],"no-global-assign","no-unsafe-negation",{"desc":"67","fix":"68"},{"desc":"69","fix":"70"},{"desc":"69","fix":"71"},"Update the dependencies array to be: [Notes, app.currentUser.functions]",{"range":"72","text":"73"},"Update the dependencies array to be: [app.currentUser.functions]",{"range":"74","text":"75"},{"range":"76","text":"75"},[3121,3123],"[Notes, app.currentUser.functions]",[724,726],"[app.currentUser.functions]",[743,745]]